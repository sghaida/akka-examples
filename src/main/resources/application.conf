akka {
  loglevel = INFO
}

config1 {

  akka {
    loglevel = DEBUG
    test.single-expect-default = 1s
  }
}

interceptingLogMessages {

  akka {
    loglevel = DEBUG
    loggers = ["akka.testkit.TestEventListener"]
    test.filter-leeway = 5s
  }

}

router-example {
  akka {
    actor.deployment {
      /pool-master {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /group-master {
        router = round-robin-group
        routees.paths = ["/user/slave-1", "/user/slave-2", "/user/slave-3", "/user/slave-4", "/user/slave-5"]
      }
    }
  }
}


custom-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1
  }

  throughput = 30 // number of messages dispacher handle for one actor until thread move to another actor
}

dispatcher-example {
  akka {
    actor.deployment {
      /counter-example {
        dispacher = custom-dispatcher
      }
    }
  }
}

// mailboxes
mailboxesDemo {
  custom-mailbox-dispatcher {
    mailbox-type = "com.sghaida.akka.actors.mailbox.PriorityMessage"
    // if PriorityMessage is encapsolated inside object we could use
    //com.sghaida.akka.actors.mailbox.Mailboxes$PriorityMessage
  }

  control-mailbox{
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  akka {
    actor.deployment{
      /alternative-control-aware{
        mailbox = control-mailbox
      }
    }
  }

}



development {
  modelManagement.uri = "http://xxx/config-manager/v1/configs"
}